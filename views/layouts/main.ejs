<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= typeof title !== 'undefined' ? title : 'Nawe Ririmba Space - Music Platform' %></title>
    <meta name="description" content="<%= typeof description !== 'undefined' ? description : 'Discover and own unique songs at Nawe Ririmba Space - where exclusive music finds its perfect owner.' %>">
    <meta name="keywords" content="<%= typeof keywords !== 'undefined' ? keywords : 'naweririmba space, benix space, music, unique songs, music marketplace, exclusive music, digital collectibles' %>">
    
    <!-- Open Graph Meta Tags -->
    <meta property="og:title" content="<%= typeof title !== 'undefined' ? title : 'Nawe Ririmba Space - Unique Music Marketplace' %>">
    <meta property="og:description" content="<%= typeof description !== 'undefined' ? description : 'Discover and own unique songs that are sold only once. Each song is a digital collectible waiting for its perfect owner.' %>">
    <meta property="og:image" content="/uploads/images/logo.png">
    <meta property="og:type" content="website">
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary">
    <meta name="twitter:title" content="<%= typeof title !== 'undefined' ? title : 'Nawe Ririmba Space - Unique Music Marketplace' %>">
    <meta name="twitter:description" content="<%= typeof description !== 'undefined' ? description : 'Discover and own unique songs that are sold only once.' %>">
    <meta name="twitter:image" content="/uploads/images/logo.png">
    
    <!-- Favicon -->
    <link rel="icon" type="image/png" href="/uploads/images/favicon.png">
    <link rel="shortcut icon" type="image/png" href="/uploads/images/favicon.png">
    <link rel="apple-touch-icon" href="/uploads/images/favicon.png">
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
</head>
<body class="d-flex flex-column min-vh-100">
    <%- include('../partials/header') %>
    <main class="flex-shrink-0 mb-5">
        <div class="container py-4">
            <%- body %>
        </div>
    </main>
    <%- include('../partials/footer') %>
    <%- include('../partials/mobile-nav') %>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/wavesurfer.js@7"></script>
    <script src="/js/waveform-player.js"></script>

    <!-- Dynamic Currency Management Script -->
    <script>
        // Global currency state with safe access and fallback
        let currencyState;
        
        try {
            currencyState = {
                current: '<%= (typeof currency !== "undefined" && currency && currency.current) ? currency.current : "USD" %>',
                rates: {
                    USD_to_RWF: <%= (typeof currency !== "undefined" && currency && currency.rates && currency.rates.USD_to_RWF) ? currency.rates.USD_to_RWF : 1450 %>,
                    RWF_to_USD: <%= (typeof currency !== "undefined" && currency && currency.rates && currency.rates.RWF_to_USD) ? currency.rates.RWF_to_USD : (1/1450) %>
                },
                lastUpdate: '<%= (typeof currency !== "undefined" && currency && currency.rates && currency.rates.lastUpdate) ? currency.rates.lastUpdate : new Date().toISOString() %>',
                isStale: <%= (typeof currency !== "undefined" && currency && currency.rates && typeof currency.rates.isStale !== "undefined") ? (currency.rates.isStale ? "true" : "false") : "false" %>
            };
        } catch (error) {
            console.warn('Currency initialization error, using fallback:', error);
            currencyState = {
                current: 'USD',
                rates: {
                    USD_to_RWF: 1450,
                    RWF_to_USD: 1/1450
                },
                lastUpdate: new Date().toISOString(),
                isStale: false
            };
        }

        // Initialize currency on page load
        function initializeCurrency() {
            // Check if currency is already set in localStorage
            const savedCurrency = localStorage.getItem('selectedCurrency');
            if (savedCurrency && ['USD', 'RWF'].includes(savedCurrency)) {
                currencyState.current = savedCurrency;
            }

            // Update exchange rates from API
            updateExchangeRates();
            
            // Update display
            updateCurrencyDisplay();
            
            // Set up periodic rate updates (every 10 minutes)
            setInterval(updateExchangeRates, 10 * 60 * 1000);
        }

        // Fetch latest exchange rates
        async function updateExchangeRates() {
            try {
                const response = await fetch('/api/detect-currency');
                const data = await response.json();
                
                currencyState.rates = data.exchange_rates;
                currencyState.lastUpdate = data.last_update;
                currencyState.isStale = data.is_stale;
                
                // Update display if rates changed significantly
                updateCurrencyDisplay();
                
                console.log('Exchange rates updated:', currencyState.rates);
            } catch (error) {
                console.warn('Failed to update exchange rates:', error);
            }
        }

        // Convert price between currencies
        function convertPrice(priceUSD, toCurrency) {
            const price = parseFloat(priceUSD);
            if (isNaN(price)) return 0;
            
            if (toCurrency === 'RWF') {
                return Math.round(price * currencyState.rates.USD_to_RWF);
            }
            return price;
        }

        // Format price with currency symbol
        function formatPrice(priceUSD, currency = null) {
            const targetCurrency = currency || currencyState.current;
            const convertedPrice = convertPrice(priceUSD, targetCurrency);
            
            if (targetCurrency === 'RWF') {
                return `${convertedPrice.toLocaleString()} RWF`;
            } else {
                return `$${convertedPrice.toFixed(2)}`;
            }
        }

        // Update all price displays on the page
        function updateCurrencyDisplay() {
            console.log('updateCurrencyDisplay called, current currency:', currencyState.current);
            
            // Update currency indicator
            const currencyIndicator = document.getElementById('currentCurrency');
            if (currencyIndicator) {
                currencyIndicator.textContent = currencyState.current;
                console.log('Updated currency indicator to:', currencyState.current);
            }
            
            // Update modal currency indicator
            const modalCurrency = document.getElementById('modal-currency');
            if (modalCurrency) {
                modalCurrency.textContent = currencyState.current;
            }
            
            // Update all price elements
            const priceElements = document.querySelectorAll('.price-display');
            console.log('Found', priceElements.length, 'price elements to update');
            
            priceElements.forEach(element => {
                const priceUSD = element.getAttribute('data-price-usd');
                const priceRWF = element.getAttribute('data-price-rwf');
                
                if (currencyState.current === 'RWF' && priceRWF) {
                    // Use stored RWF value if available
                    const rwfPrice = parseFloat(priceRWF);
                    element.textContent = `${rwfPrice.toLocaleString()} RWF`;
                } else if (currencyState.current === 'USD' && priceUSD) {
                    // Use stored USD value if available
                    const usdPrice = parseFloat(priceUSD);
                    element.textContent = `$${usdPrice.toFixed(2)}`;
                } else if (priceUSD) {
                    // Fallback to conversion
                    const newPrice = formatPrice(priceUSD);
                    element.textContent = newPrice;
                }
            });

            // Update balance display
            const balanceElement = document.querySelector('.balance-display');
            if (balanceElement) {
                const balanceUSD = balanceElement.getAttribute('data-balance-usd');
                if (balanceUSD) {
                    balanceElement.textContent = formatPrice(balanceUSD);
                }
            }

            // Update currency toggle buttons
            document.querySelectorAll('.currency-option').forEach(option => {
                const currency = option.getAttribute('data-currency');
                if (currency === currencyState.current) {
                    option.classList.add('active');
                } else {
                    option.classList.remove('active');
                }
            });

            // Update exchange rate display
            const rateDisplay = document.getElementById('exchange-rate-display');
            if (rateDisplay) {
                const rate = currencyState.rates.USD_to_RWF;
                rateDisplay.textContent = `1 USD = ${rate.toLocaleString()} RWF`;
                
                // Show staleness warning if needed
                if (currencyState.isStale) {
                    rateDisplay.classList.add('text-warning');
                    rateDisplay.title = 'Exchange rates may be outdated';
                } else {
                    rateDisplay.classList.remove('text-warning');
                    rateDisplay.title = `Last updated: ${currencyState.lastUpdate}`;
                }
            }
        }

        // Handle currency selection
        function switchCurrency(newCurrency) {
            console.log('switchCurrency called with:', newCurrency);
            if (['USD', 'RWF'].includes(newCurrency)) {
                currencyState.current = newCurrency;
                localStorage.setItem('selectedCurrency', newCurrency);
                console.log('Currency switched to:', newCurrency);
                updateCurrencyDisplay();
                
                // Update purchase modal if it exists
                updatePurchaseModal();
                
                // Trigger custom event for other components
                window.dispatchEvent(new CustomEvent('currencyChanged', {
                    detail: { currency: newCurrency, rates: currencyState.rates }
                }));
            } else {
                console.error('Invalid currency:', newCurrency);
            }
        }

        // Get payment options for a specific amount
        async function getPaymentOptions(amountUSD) {
            try {
                const response = await fetch(`/api/payment-options/${amountUSD}`);
                const data = await response.json();
                return data.payment_options;
            } catch (error) {
                console.error('Failed to get payment options:', error);
                // Fallback to local calculation
                return {
                    USD: {
                        amount: parseFloat(amountUSD).toFixed(2),
                        currency: 'USD',
                        display: `$${parseFloat(amountUSD).toFixed(2)}`
                    },
                    RWF: {
                        amount: convertPrice(amountUSD, 'RWF'),
                        currency: 'RWF',
                        display: `${convertPrice(amountUSD, 'RWF').toLocaleString()} RWF`
                    }
                };
            }
        }

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            initializeCurrency();

            // Currency selection event listeners
            document.querySelectorAll('.currency-option').forEach(option => {
                option.addEventListener('click', function(e) {
                    e.preventDefault();
                    const currency = this.getAttribute('data-currency');
                    switchCurrency(currency);
                });
            });

            // Expose functions globally for other scripts
            window.currencyUtils = {
                convertPrice,
                formatPrice,
                switchCurrency,
                getPaymentOptions,
                getCurrentCurrency: () => currencyState.current,
                getCurrentRates: () => currencyState.rates
            };
        });

        // Update purchase modal with selected currency
        function updatePurchaseModal() {
            const modal = document.getElementById('purchaseModal');
            if (modal) {
                const priceElement = modal.querySelector('.modal-price');
                if (priceElement) {
                    const priceUSD = priceElement.getAttribute('data-price-usd');
                    priceElement.textContent = formatPrice(priceUSD);
                }
            }
        }

        // Get current currency for payment processing
        function getCurrentCurrency() {
            return currentCurrency;
        }

        // Get converted price for payment
        function getConvertedPrice(priceUSD) {
            return convertPrice(priceUSD, currentCurrency);
        }
    </script>

    <!-- Toast Container -->
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;">
        <div id="notificationToast" class="toast" role="alert">
            <div class="toast-header">
                <strong class="me-auto" id="toastTitle">Notification</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body" id="toastMessage">
                <!-- Toast message will be inserted here -->
            </div>
        </div>
    </div>

    <!-- Toast utility script -->
    <script>
        function showToast(title, message, type = 'info') {
            const toast = document.getElementById('notificationToast');
            const toastTitle = document.getElementById('toastTitle');
            const toastMessage = document.getElementById('toastMessage');
            
            toastTitle.textContent = title;
            toastMessage.textContent = message;
            
            // Reset classes and add appropriate color
            toast.className = 'toast';
            if (type === 'success') {
                toast.classList.add('bg-success', 'text-white');
            } else if (type === 'error') {
                toast.classList.add('bg-danger', 'text-white');
            } else if (type === 'warning') {
                toast.classList.add('bg-warning');
            } else {
                toast.classList.add('bg-info', 'text-white');
            }
            
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
        }
    </script>
</body>
</html>
